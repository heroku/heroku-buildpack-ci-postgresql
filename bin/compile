#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"

# config
S3_BUCKET="ci-database-binary"
POSTGRESQL_MAJOR_VERSION=10
if [ -f "$ENV_DIR/POSTGRESQL_VERSION" ]
then
  POSTGRESQL_MAJOR_VERSION="$(cat $ENV_DIR/POSTGRESQL_VERSION)"
fi

case "$POSTGRESQL_MAJOR_VERSION" in
  10)  POSTGRESQL_VERSION="10.5";;
  9.6) POSTGRESQL_VERSION="9.6.9";;
  *)   POSTGRESQL_VERSION="$POSTGRESQL_MAJOR_VERSION";;
esac

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"
  stack="$4"

  mkdir -p $location
  package="https://${S3_BUCKET}.s3.amazonaws.com/$stack/$engine-$version.tgz"
  if ! wget --spider $package 2>/dev/null
  then
    error "Specified postgresql version ${POSTGRESQL_VERSION} is not available"
  fi
  curl $package -s -o - | tar xzf - -C $location
}

echo "Using postgresql version: ${POSTGRESQL_VERSION}" | indent

case $STACK in
    cedar-14) : ;;
    heroku-16) : ;;
    heroku-16-build) : ;;
    heroku-18) ;;
    heroku-18-build) ;;
    *) error "Unrecognized stack version: ${STACK}";;
esac

echo "Using stack version: ${STACK}" | indent

# vendor directories
VENDORED_POSTGRESQL="vendor/postgresql"

# vendor postgresql into the slug
PATH="$BUILD_DIR/$VENDORED_POSTGRESQL/bin:$PATH"
echo "-----> Fetching and vendoring postgresql into slug"
mkdir -p "$BUILD_DIR/$VENDORED_POSTGRESQL"
package_download "postgresql" "${POSTGRESQL_VERSION}" "${BUILD_DIR}/${VENDORED_POSTGRESQL}" "${STACK}"

echo "-----> Initializing database"
export PGHOST=/tmp
DATABASE=postgres_buildpack_db

# Set up and configure a database for Heroku CI
user="u$(</dev/urandom tr -dc 'a-z0-9' | head -c 13)"
password="p$(</dev/urandom tr -dc 'a-z0-9' | head -c 64)"

export PGDATA=$BUILD_DIR/vendor/postgresql/data
LC_COLLATE=en_US.UTF-8  \
LC_CTYPE=en_US.UTF-8    \
LC_MESSAGES=en_US.UTF-8 \
LC_MONETARY=en_US.UTF-8 \
LC_NUMERIC=en_US.UTF-8  \
LC_TIME=en_US.UTF-8     \
initdb -E UTF8 | indent
pg_ctl -l .pg.log -w start | indent
psql -c "CREATE USER ${user} WITH SUPERUSER ENCRYPTED PASSWORD '${password}'" postgres | indent
createdb --owner $user $DATABASE | indent
DATABASE_URL="postgres://${user}:${password}@localhost:5432/${DATABASE}"
# N.B.: we do not stop the server here because some buildpacks rely on
# having a live database at DATABASE_URL in order to run the build

echo "export PGHOST=$PGHOST" >> $BUILDPACK_DIR/export
echo "export DATABASE_URL=$DATABASE_URL" >> $BUILDPACK_DIR/export
echo "export PGDATA=$HOME/vendor/postgresql/data" >> $BUILDPACK_DIR/export

# setting .profile.d script for database startup
echo "-----> Copying .profile.d/pg.sh to add postgresql binaries to PATH"
mkdir -p $BUILD_DIR/.profile.d
cat<<\EOF > $BUILD_DIR/.profile.d/pg-path.sh
PATH=$HOME/vendor/postgresql/bin:$PATH

export PGHOST=/tmp
export PGDATA=$HOME/vendor/postgresql/data

if ! pg_ctl status >/dev/null;
then
  pg_ctl -l .pg.log -w start
fi
EOF

cat<<EOF > $BUILD_DIR/.profile.d/pg-env.sh
export DATABASE_URL="$DATABASE_URL"
EOF

echo "-----> postgresql done"
