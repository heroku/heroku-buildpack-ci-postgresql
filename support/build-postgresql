#!/bin/bash

set -e -o pipefail

if [ -z "$1" ]; then
  # read postgres versions to build from file
  PG_VERSIONS_FILE="pg_versions"
  if [ ! -f "$PG_VERSIONS_FILE" ]; then
    echo "The '$PG_VERSIONS_FILE' file should exist and contain a list of PG versions, e.g: 11.5;12.1"
    exit 1
  fi
  IFS=';' read -ra PGSQL_VERSIONS <<< "$(cat $PG_VERSIONS_FILE)"
else
  # explicit build, used by GH Action
  echo "Building PostgreSQL $1"
  IFS=';' read -ra PGSQL_VERSIONS <<< "$1"
fi

if [[ -z "$AWS_ACCESS_KEY_ID" ]]; then
  echo "AWS_ACCESS_KEY_ID should be set"
  exit 1
fi

if [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
  echo "AWS_SECRET_ACCESS_KEY should be set"
  exit 1
fi

for PGSQL_VERSION in "${PGSQL_VERSIONS[@]}"; do
  PGSQL_VERSION=$(echo "$PGSQL_VERSION" | tr -d '[:space:]') # '12.2 ' -> '12.2'
  for stack in heroku-{18,20}; do
    echo "Building PG $PGSQL_VERSION for $stack..."
    BASE_IMAGE="heroku/${stack/-/:}" # heroku-18 -> heroku/heroku:18
    docker build \
      -t postgresql-builder \
      --build-arg BASE_IMAGE="$BASE_IMAGE" \
      --build-arg STACK_FOLDER="$stack" .
    docker run \
      -e "S3_BUCKET=ci-database-binary" \
      -e "POSTGRESQL_VERSION=$PGSQL_VERSION" \
      -e "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" \
      -e "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" \
      -a=stdout -a=stderr postgresql-builder
    echo "Finished building $PGSQL_VERSION for $stack."
  done
done
